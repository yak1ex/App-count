#!/usr/bin/perl

use strict;
use warnings;

# PODNAME: count
# ABSTRACT: Counting utility for a file consisting of the fixed number of fields like CSV
# VERSION

use App::count;

App::count->run(@ARGV);

__END__

=head1 SYNOPSIS

count C<-h>

count C<--help>

count [C<-g>|C<--group> E<lt>columnsE<gt>] [C<-c>|C<--count>] [C<-s>|C<--sum> E<lt>columnsE<gt>] [C<--min> E<lt>columnsE<gt>] [C<--max> E<lt>columnsE<gt>] [C<--avg>|C<--ave> E<lt>columnsE<gt>] [C<-m>|C<--map> E<lt>mapE<gt>] [C<-M>|C<--map-file> E<lt>filenameE<gt>] [C<-t>|C<--delimiter> E<lt>delimiterE<gt>] C<files>...

  # show brief instruction
  count -h

  # show POD
  count --help

  # count the number of records grouping by the column 1 and 2
  # The column number is 1-origin
  count -g 1,2 file

  # count the sum of the column 3 grouping by the column 1 and 2
  # field delimiter is ','
  count -g 1 -g 2 -s 3 -t ',' file

  # Ouput min,max,average of the column 2 and the column 3 grouping by the column 1
  count -g 1 --min 2 --max 2 --avg 2 --min 3 --max 3 --avg 3

  # All columns are kept and lookuped value of column 1 from foomap in map.yaml is appended
  count -g '*' -M map.yaml -m 1,foomap

=head1 DESCRIPTION

I has written a oneliner like the following repeatedly and repeatedly, to make some statistics.

  perl -e 'while(<>) { @t = split /\t/; ++$c{$t[0]}; } foreach my $k (keys %c) { print "$k,$c{$k}\n" }'

Yes, we can write as the following making use of command line option.

  perl -an -F "\t" -e '++$c{$F[0]} END { foreach my $k (keys %c) { print "$k,$c{$k}\n" }'

This is still verbose in contrast with doing. By this script, you can write as the following. Please NOTE that the number is 1-origin.

  count -g 1 -t "\t"

Conforming to Unix philosophy, this scirpt does NOT have configurable sort functionality.
If you want it, you can use C<sort> command.

  count -g 1 -t "\t" | sort -k n1

=option C<-h>

Show brief instruction.

=for getopt 'h'

=option C<--help>

Show this POD.

=for getopt 'help'

=option C<-g>|C<--group> E<lt>columnsE<gt>

Specify group columns like GROUP BY in SQL.
You can specify multiple times and/or as comma separated numbers.

Specifying a char '*' only means all fields are used as a group.
If there are 3 fields in a row, C<-g *> means C<-g 1,2,3>.

=for getopt 'g|group=s@'

=option C<-c>|C<--count>

Output the number of records. If no other output option is specified, process as if this option is specified.

=for getopt 'c|count'

=option C<-s>|C<--sum> E<lt>columnsE<gt>

Output the sum of the specified column.
You can specify multiple times and/or as comma separated numbers.

=for getopt 'sum|s=s@'

=option C<--min> E<lt>columnsE<gt>

Output the minimum value of the specified column.
You can specify multiple times and/or as comma separated numbers.

=for getopt 'min=s@'

=option C<--max> E<lt>columnsE<gt>

Output the maximum value of the specified column.
You can specify multiple times and/or as comma separated numbers.

=for getopt 'max=s@'

=option C<--avg>|C<--ave> E<lt>columnsE<gt>

Output the average of the specified column.
You can specify multiple times and/or as comma separated numbers.

=for getopt 'avg|ave=s@'

=option C<-m>|C<--map> E<lt>mapE<gt>

Output mapped value of the specified column by the specified mapping key.
Argument is a list of key and column like.

  -m 0,class,1,subclass

=for getopt 'map|m=s@'

=option C<-M>|C<--map-file> E<lt>filenameE<gt>

Specify map file used by -m option. The map file is YAML file having the following structure.

  <key1>:
    <number11>: <value11>
    <number12>: <value12>
  <key2>:
    <number21>: <value21>
    <number22>: <value22>

=for getopt 'M|map-file=s'

=option C<-t>|C<--delimiter> E<lt>delimiterE<gt>

Specify field separator character. The character is used by both of input and output. Perl's escape such as '\x0D' is available. So, you need to care about escape. For example, if you want to use a backslash as a delimiter, you need to specify as '\\'.

If omitted, the special rule is applied: /\s+/ is used for an input separator and '\t' is used for an output separator.

=for getopt 't|delimiter=s'

=option C<files>...

Input files. If no files are specified, read from STDIN.
